<template>
<div class="car-list-container">
<section>
   <el-container >
    <el-aside width="180px">
       
                  <el-row>
                        <el-input placeholder="请输入要搜索的品牌关键词" v-model="filterText"  size="mini" class="input-with-search">
                          <el-button slot="append" icon="el-icon-search" size="mini" class="input-with-button" ></el-button>
                        </el-input> 
                  </el-row>
                  <el-row>
                      <el-tree class="filter-tree"
                        :props="props"
                        :filter-node-method="filterNode"
                        :data="treedata"
                        @node-click="handleNodeClick"
                        default-expand-all
                        expand-on-click-node
                        accordion
                        lazy
                        highlight-current
                        ref="vehicletree">
                      </el-tree>
                  </el-row>
    </el-aside>
    <el-main>
      <el-row class="main-row-filter-result" v-loading="loading">
        <el-col  class="el-col-card-container" v-for="(item) in vehicledatas" :key="item.id">
          <el-card class="card" :body-style="{ padding: '5px' }" >
              <!-- <span class="tooltiptext">{{item.series}}&nbsp;{{item.year}} &nbsp;{{item.model}}</span>  -->
              <img :src="item.picUrl" class="image" @dblclick="openEdit(item.id,item.pictureId)" :onerror="defaultImg">
              <div class="card-bottom">
                <span>{{item.series}}&nbsp;&nbsp;&nbsp;{{item.year}}</span>
              </div>
              <div class="card-bottom">
                <span>{{item.model}}</span>
              </div>
          </el-card>
        </el-col>
				<div class="no-result" v-show="!hasResult">{{noResultText}}</div>
      </el-row>
      
      <el-row type="flex" justify="center">
        <el-pagination class="main-row-result-pagination" :page-size="pageSize" background style="float:right;"
          :current-page="pageIndex" @current-change="doTurnPage" layout="prev, pager, next" :total="totalCount">>
          
        </el-pagination>
      </el-row>
    </el-main>
  </el-container>
  <edit-dialog :visible="dialogEditVisible" :carid="selectedCarId" :imageid="selectedPictureId"  @editClosed="handleEditClosed" @car:onclose="editClose">

  </edit-dialog>
</section>
</div>

</template>

<script>
import {
  getBrands,
  getSeriesbyBrandid,
  getModelsbyYear,
  getModelYearsbySeries,
  getVehicles
} from "@/api";
import EditDialog from "./EditDialog.vue";
import defaultrequireImg from "@/assets/images/default.png";

export default {
  components: {
    EditDialog
  },
  data() {
    return {
      filterText: "",
      loading: true,
      noResultText: "检索到 0 个结果",
      treedata: [],
      tempdata: [],
      props: {
        id: "id",
        label: "name",
        children: "children",
        isLeaf: "leaf",
        itemtype: "itemtype"
      },
      vehicledatas: [],
      dialogEditVisible: false,
      selectedCarId: "",
      selectedPictureId: -1,
      pageSize: this.GLOBAL.settings.backend.pageSize,
      pageIndex: 1,
      totalCount: -1,
      paramMap: {},
      defaultImg: 'this.src="' + require("../../../assets/images/default.png") + '"'
      // myBarOption:{
      //   barColor:"red"
      // }
    };
  },
  mounted: function() {
    this.init();
  },

  watch: {
    filterText(val) {
      this.treedata = this.tempdata;
      this.$refs.vehicletree.filter(val);
    }
  },

  computed: {
    hasResult() {
      return this.vehicledatas.length > 0;
    }
  },

  methods: {
    init() {
      this.loadBrands();
      this.loadVehicles(this.paramMap);
    },
    loadBrands() {
      getBrands().then(res => {
        if (res.success) {
          var newArrs = [];
          res.data.forEach((item, index) => {
            var obj = {
              id: item.id,
              name:
                item.total === 0
                  ? item.name
                  : item.name + "(" + item.total + ")",
              leaf: item.total == 0 ? true : false,
              itemtype: "brand"
            };
            newArrs.push(obj);
          });
          this.treedata = newArrs;
          this.tempdata = this.treedata;
        }
      });
    },
    handleNodeClick(data, node) {
      if (node.level === 1) {
        //加载车系
        if (!data.children) {
          this.$set(data, "children", []);
          var nodeid = node.data.id;
          getSeriesbyBrandid({ parentid: nodeid }).then(res => {
            if (res.success) {
              var series = res.data;
              series.forEach(element => {
                this.appendNode(element, data, "series");
              });
            }
          });
        }
      }

      if (node.level === 2) {
        //加载年份
        if (!data.children) {
          this.$set(data, "children", []);
          var nodeid = node.data.id;
          getModelYearsbySeries({ parentid: nodeid }).then(res => {
            if (res.success) {
              var modelYears = res.data;
              modelYears.forEach(element => {
                this.appendNode(element, data, "modelyear");
              });
            }
          });
        }
      }

      if (node.level === 3) {
        //加载款型
        if (!data.children) {
          this.$set(data, "children", []);
          var nodeid = node.data.id;
          getModelsbyYear({ parentid: nodeid }).then(res => {
            if (res.success) {
              var models = res.data;
              models.forEach(element => {
                this.appendNode(element, data, "model");
              });
            }
          });
        }
      }
      this.paramMap = {};
      this.paramMap[node.data.itemtype] = node.data.id;
      this.loadVehicles();
      this.filterNode(this.filterText, data, node);
    },
    handlecarddbClick() {
      this.dialogEditVisible = true;
    },
    handleEditClosed() {
      this.dialogEditVisible = false;
    },
    appendNode(data, node, itemtype) {
      const newchild = {
        id: data.id,
        name: data.total == 0 ? data.name : data.name + "(" + data.total + ")",
        leaf: data.total == 0 ? true : false,
        itemtype: itemtype
      };
      node.children.push(newchild);
    },
    filterNode(value, data, node) {
      if (!value) return true;
      debugger;
      this.treedata = this.treedata.filter(
        item => item.name.indexOf(value) !== -1
      );
      return data.name.indexOf(value) !== -1;
    },
    doTurnPage(currentChange) {
      this.pageIndex = currentChange;
      this.loadVehicles();
    },
    openEdit(id, picId) {
      this.selectedCarId = id;
      this.selectedPictureId = picId;
      this.dialogEditVisible = true;
    },
    editClose(val) {
      this.dialogEditVisible = val;
    },

    loadVehicles() {
      this.vehicledatas.splice(0, this.vehicledatas.length);
      this.loading = true;
      getVehicles({
        pageIndex: this.pageIndex,
        pageSize: this.pageSize,
        paramMap: this.paramMap
      }).then(res => {
        this.loading = false;
        if (res.success) {
          var data = res.data;
          this.totalCount = data.totalCount;
          this.vehicledatas = data.items;
        }
      });
    }
  }
};
</script>

<style lang="scss" scoped>
.car-list-container {
  .image {
    width: 100%;
    height: 150px;
    display: block;
  }
  .el-card {
    border-radius: 4px;
    height: 220px;
    padding: 10px;
  }
  .el-card__body {
    padding: 0px;
  }
  .card-bottom {
    margin-top: 13px;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 1;
    overflow: hidden;
  }
  .input-with-search {
    width: 170px;
    text-align: left;
  }
  .el-col-card-container {
    width: 245px;
    margin: 5px 12px;
    padding: 0px;
  }
  .no-result {
    line-height: 200px;
    text-align: center;
    vertical-align: middle;
  }
  .main-row-result-pagination {
    line-height: 60px;
    background: #fff;
    text-align: center;
    padding-top: 30px;
  }
  .card {
    position: relative;
    padding: "0px";
    margin: "5px";
  }
  .card:hover {
    border: 1px solid #1b90f7;
  }
  /* .card:hover .tooltiptext {
  visibility: visible;
}
.card .tooltiptext {
  visibility: hidden;
  width: 120px;
  background-color: black;
  color: #fff;
  text-align: center;
  padding: 5px 0;
  border-radius: 6px;
  position: absolute;
  z-index: 1;
}*/ /*鼠标移动上去后显示提示框 */
}
</style>
